type ConfirmedCases {
  caseDate: String
  confirmed: Int
  dead: Int
  healed: Int
  updateDate: String
}

type Place {
  placeId: Int
  placeCode: String!
  placeName: String!
  placeTypeId: Int!
  parentRegion: Int
  ConfirmedCases: ConfirmedCases
}

type Query {
  "Return all places"
  getPlaces: [Place]
  "Return all total cases by place"
  getTotalConfirmedCases: [Place]
  "Return history cases by place"
  getHistoryCasesOfPlace(placeCode: String!): [ConfirmedCases]
}

input ConfirmedCaseInput {
  placeCode: String!
  confirmed: Int
  dead: Int
  healed: Int
  caseDate: String!
}

type Mutation {
  "Create to case confirmed"
  registerCantonCaseConfirmed(input: ConfirmedCaseInput!): ConfirmedCases
  "Create to case for country"
  registerCasesCountry(input: ConfirmedCaseInput!): ConfirmedCases
}