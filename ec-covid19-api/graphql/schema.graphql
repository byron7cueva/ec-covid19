type ConfirmedCases {
  caseDate: String
  confirmed: Int
  totalConfirmed: Int
  dead: Int
  totalDead: Int
  healed: Int
  totalHealed: Int
  updateDate: String
}

type Place {
  placeCode: ID!
  placeName: String!
  x: Float
  y: Float
  placeTypeId: Int!
  parentRegion: String
  totalconfirmed: Int
  totaldead: Int
  totalhealed: Int
  casedate: String
}

type Query {
  "Return all places"
  getPlaces: [Place]
  "Return all total cases by place"
  getAllTotalLastCases: [Place]
  "Return total history cases by place"
  getTotalHistoryCases(placeCode: String!): [ConfirmedCases]
  "Return daily history cases"
  getDailyHitoryCases(placeCode: String): [ConfirmedCases]
}

input ConfirmedCaseInput {
  placeCode: ID!
  confirmed: Int
  totalConfirmed: Int
  caseDate: String!
}

input ConfirmedCountryCaseInput {
  dead: Int
  totalDead: Int
  healed: Int
  totalHealed: Int
  caseDate: String!
}

type Mutation {
  "Create to case confirmed"
  registerCantonCaseConfirmed(input: ConfirmedCaseInput!): ConfirmedCases
  "Create to case for country"
  registerDeadAndHealedCountry(input: ConfirmedCountryCaseInput!): ConfirmedCases
}